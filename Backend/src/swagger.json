{
    "openapi": "3.0.0",
    "info": {
        "title": "GoGreen API",
        "version": "1.0.0",
        "description": "Documentation API of GoGreen Project"
    },
    "servers": [
        {
            "url": "http://localhost:5000",
            "description": "Local server"
        }
    ],
    "tags": [
        {
            "name": "Auth",
            "description": "Operations about Authentication"
        },
        {
            "name": "Care",
            "description": "Operations about Tasks"
        },
        {
            "name": "Events",
            "description": "Operations about Events"
        },
        {
            "name": "Nurseries",
            "description": "Operations about Nurseries"
        },
        {
            "name": "Users",
            "description": "Operations about Users"
        },
        {
            "name": "Trees",
            "description": "Operations about Trees"
        },
        {
            "name": "Rewards",
            "description": "Operations about Rewards"
        },
        {
            "name": "Reports",
            "description": "Operations about Reports"
        },
        {
            "name": "Responses",
            "description": "Operations about Responses"
        },
        {
            "name": "Comments",
            "description": "Operations about Comments"
        },
        {
            "name": "Search",
            "description": "Operations about Search in the home and community"
        },
        {
            "name": "notifications",
            "description": "Operations about Notifications"
        },
        {
            "name": "Models",
            "description": "Operations about deep learning models & chatbot"
        },
        {
            "name": "Partners",
            "description": "Operations about Partners"
        },
        {
            "name": "Coupons",
            "description": "Operations about Coupons"
        }
    ],
    "paths": {
        "/api/auth/register": {
            "post": {
                "tags": ["Auth"],
                "summary": "Register",
                "description": "Register a new user with username, email, and password.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "example" : "Hagar Gamal",
                                        "length" : {"max" : 15, "min": 3}
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example" : "Hagarelessawy0@gmail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example" : "123_456_789",
                                        "minLength": 8
                                    },
                                    "passwordConfirmation": {
                                        "type": "string",
                                        "example" : "123_456_789",
                                        "length" : {"min": 8}
                                    }
                                },
                                "required": ["username", "email", "password", "passwordConfirmation"]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "headers": {
                            "x-auth-token": {
                                "description": "Authentication token for the newly registered user",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User created successfully"
                                        },
                                        "user_id": {
                                            "type": "string",
                                            "format": "objectid",
                                            "example": "67da1529cd23e1273a0dbfa2"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the user enters an email that already exists, or the two passwords do not match, or enters something that conflicts with the validation rules.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Email already exists"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "email"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "body"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "tags": ["Auth"],
                "summary": "Login",
                "description": "Login user with email and password.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example" : "Hagarelessawy0@gmail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example" : "123_456_789",
                                        "minLength": 8
                                    }
                                },
                                "required": ["email", "password"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {
                            "x-auth-token": {
                                "description": "Authentication token for the logged-in user",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Login successfully"
                                        },
                                        "user_id": {
                                            "type": "string",
                                            "format": "objectid",
                                            "example": "67da1529cd23e1273a0dbfa2"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Wrong email or password",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Wrong Password"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "password"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "body"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "tags": ["Auth"],
                "summary": "Logout",
                "description": "Logs out current logged in user session by invalidating the token.",
                "security": [{
                    "bearerAuth": []
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/forgotPassword": {
            "post": {
                "tags": ["Auth"],
                "summary": "forgot password",
                "description": "Send a reset password link to the user's email.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "Hagarelessawy0@gmail.com"
                                    }
                                },
                                "required": ["email"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email sent successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "error sending email or invalid email format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Please enter a valid email address"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "email"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "body"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "There is no user with this email"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/reset-password/{token}": {
            "post": {
                "tags": ["Auth"],
                "summary": "Reset Password",
                "description": "Reset user's password using the token sent to their email.",
                "parameters": [{
                    "name": "token",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "password": {
                                        "type": "string",
                                        "example" : "123456789",
                                        "minLength" : 8
                                    },
                                    "passwordConfirmation": {
                                        "type": "string",
                                        "example" : "123456789",
                                        "minLength" : 8
                                    }
                                },
                                "required": ["password", "passwordConfirmation"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password reset successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Passwords do not match or are shorter than 8 characters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "passwords do not match"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "password"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "body"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invalid token or user not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid token"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/verify-email/{token}": {
            "post": {
                "tags": ["Auth"],
                "summary": "Verify user email",
                "description": "Verify user's email address using the verification token sent to their email.",
                "operationId": "verifyEmail",
                "parameters": [{
                    "name": "token",
                    "in": "path",
                    "required": true,
                    "description": "Email verification token",
                    "schema": {
                        "type": "string",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Email verified successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email verified successfully!"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "invalid or expired token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid token"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/google/callback": {
            "post": {
                "tags": ["Auth"]
            }
        },
        "/api/users/": {
            "get": {
                "tags": ["Users"],
                "summary": "Retrieve all users",
                "description": "Display all active users registered in the application in the form of pages. Each page displays a specific number of elements that you will specify as a parameter and can be filtered",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description" : "The number of the page",
                        "schema":{
                            "type": "number",
                            "format": "integer",
                            "minimum": 1,
                            "default": 1,
                            "validation": "From 1 to (total number of elements / number of elements on one page)"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description" : "The number of elements on one page",
                        "schema":{
                            "type": "number",
                            "format": "integer",
                            "default": 5
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "JSON string containing filter criteria (e.g., {'username':'Hagar Gamal', 'role':'user'})",
                        "schema": {
                            "type": "string",
                            "example": "{\"username\":\"Hagar Gamal\"}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "length": {
                                            "type": "integer",
                                            "description": "Number of users in the current page",
                                            "example": 6
                                        },
                                        "page": {
                                            "type": "integer",
                                            "description": "Current page number",
                                            "example": 1
                                        },
                                        "users": {
                                            "type": "array",
                                            "description": "List of users",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Admin privileges are required to access this route"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": ["Users"],
                "summary": "Get specific user",
                "description": "Retrieves detailed information about a specific user by his/her unique identifier",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "67da1529cd23e1273a0dbfa2"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User",
                                    "description": "User object details without password"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID Format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Invalid user ID Format"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "id"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "path"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update user",
                "description": "Allows a user to update his/her profile information (allowed fields: userName, location, address, email)",
                "tags": ["Users"],
                "security": [{
                    "BearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "User ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67da1529cd23e1273a0dbfa2"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "required": false,
                                        "description": "New username (3-15 characters)",
                                        "example": "Hagora"
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "New email address (if updated will send verification mail)",
                                        "format": "email",
                                        "required": false,
                                        "example": "hagargamal@example.com"
                                    },
                                    "location": {
                                        "type": "object",
                                        "description": "User's location",
                                        "required": false,
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "enum": ["Point"],
                                                "example": "Point"
                                            },
                                            "coordinates": {
                                                "type": "array",
                                                "items": { "type": "number" },
                                                "minItems": 2,
                                                "maxItems": 2,
                                                "example": [30.04444564, 31.23572343]
                                            }
                                        }
                                    },
                                    "address": {
                                        "type": "string",
                                        "description": "New address",
                                        "required": false,
                                        "example": "Abo Kabir"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User updated successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error - user enters something that conflicts with the validation rules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Location must be a Point"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "location.type"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "body"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token, session expired, or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User is not authorized to update this profile",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete user",
                "description": "Marks the user as inactive, moves his/her data to the trash collection, and deletes the original record",
                "tags": ["Users"],
                "security": [{
                    "BearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "User ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67da1529cd23e1273a0dbfa2"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User deleted successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token, session expired, or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The user who requested is not the owner of the ID in the path or admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}/activity": {
            "put": {
                "tags": ["Users"],
                "summary": "Update user points",
                "description": "Update user points based on action taken by this user (locate, report, care, plant)",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "67da1529cd23e1273a0dbfa2"
                    }
                }],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "activity": {
                                        "type": "string",
                                        "enum": ["locate", "report", "care", "plant"],
                                        "example": "locate"
                                    }
                                },
                                "required": ["activity"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Points added successfully, current points: 43, keep going to earn coupons!"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the user enters anything other than locate, report, care, plant",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Invalid activity"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "activity"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "body"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "summary": "The user who requested is not the owner of the ID in the path",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}/image": {
            "patch": {
                "summary": "Upload user profile picture",
                "description": "Allows the user to upload a new profile picture with extension png / jpg / jpeg and size less than 5MB",
                "tags": ["Users"],
                "security": [{
                    "BearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "User ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67da1529cd23e1273a0dbfa2"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Profile picture file"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Image uploaded successfully."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing image file or unexpected file extension)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Image is required"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "image"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "body"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "summary": "The user who requested is not the owner of the ID in the path",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete user profile picture",
                "description": "Removes the user's profile picture and resets it to the default avatar",
                "tags": ["Users"],
                "security": [{
                    "BearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "User ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67da1529cd23e1273a0dbfa2"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Picture deleted successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID Format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Invalid user ID Format"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "id"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "path"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "summary": "The user who requested is not the owner of the ID in the path",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}/change-password": {
            "put": {
                "summary": "Change user password",
                "description": "Allows a user to change his/her password by providing the current password and a new password",
                "tags": ["Users"],
                "security": [{
                    "BearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "User ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67da1529cd23e1273a0dbfa2"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "currentPassword": {
                                        "type": "string",
                                        "description": "User's current password",
                                        "example": "12345678"
                                    },
                                    "newPassword": {
                                        "type": "string",
                                        "description": "New password (must be at least 8 characters)",
                                        "minLength": 8,
                                        "example": "123456780"
                                    },
                                    "confirmNewPassword": {
                                        "type": "string",
                                        "description": "Confirmation of the new password",
                                        "example": "123456780"
                                    }
                                },
                                "required": ["currentPassword", "newPassword", "confirmNewPassword"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password changed successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "validation error - user enters something that conflicts with the validation rules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "New password must be at least 8 characters long"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "newPassword"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "body"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "summary": "The user who requested is not the owner of the ID in the path",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}/points-history": {
            "get": {
                "tags": ["Rewards"],
                "summary": "Get user's points history",
                "description": "Retrieves the points transaction history for a specific user",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67da1529cd23e1273a0dbfa2"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "PointsHistoryEntry": {
                                                        "type": "object",
                                                        "properties": {
                                                            "action": {
                                                                "type": "string",
                                                                "description": "Type of action that earned points",
                                                                "enum": ["plant", "report", "care", "locate"],
                                                                "example": "plant"
                                                            },
                                                            "points": {
                                                            "type": "integer",
                                                            "description": "The number of points earned",
                                                            "example": 50
                                                            },
                                                            "date": {
                                                            "type": "string",
                                                            "format": "date-time",
                                                            "description": "When the points were awarded",
                                                            "example": "2023-05-15T10:00:00Z"
                                                            },
                                                            "img": {
                                                                "type": "string",
                                                                "format": "uri",
                                                                "description": "Path to the image associated with the points history entry",
                                                                "example": "../uploads/plant.png"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "description": "Array of points history entries"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "You have no points yet, Plant a tree, report a problem, care for a tree or locate a tree to earn points"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID Format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Invalid user ID Format"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "id"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "path"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The user who requested is not the owner of the ID in the path",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}/saved-reports": {
            "get": {
                "tags": ["Users"],
                "summary": "Get user's saved reports",
                "description": "Retrieves all reports saved by the specified user",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67da1529cd23e1273a0dbfa2"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response (With the name and photo of the owner of each report)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Report"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID Format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Invalid user ID Format"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "id"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "path"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The user who requested is not the owner of the ID in the path",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/users/{id}/tree": {
            "get": {
                "tags": ["Care"],
                "summary": "Retrieve user trees",
                "description": "Retrieval of trees planted by the user",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "required": true,
                    "schema": {
                        "type": "string",    
                        "format": "objectid",
                        "example": "67da1529cd23e1273a0dbfa2"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "array of trees which user was planted",
                                    "items": {
                                        "$ref": "#/components/schemas/Tree"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID Format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Invalid user ID Format"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "id"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "path"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [ "Trees" ],
                "summary": "Locate tree",
                "description": "Locating a tree and adding it to the database, whether it is newly planted or already existing",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "67da1529cd23e1273a0dbfa2"
                    }
                }],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "treeName": {
                                        "type": "string",
                                        "maxLength": 15,
                                        "example": "tree 1"
                                    },
                                    "treeLocation": {
                                        "type": "object",
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "enum": ["Point"],
                                                "example": "Point",
                                                "description": "GeoJSON type (always 'Point' for coordinates)"
                                            },
                                            "coordinates": {
                                                "type": "array",
                                                "minItems": 2,
                                                "maxItems": 2,
                                                "example": [31.20886, 30.07694],
                                                "prefixItems": [
                                                    {
                                                        "type": "number",
                                                        "minimum": 24,
                                                        "maximum": 37,
                                                        "description": "Longitude (between 24 and 37)"
                                                    },
                                                    {
                                                        "type": "number",
                                                        "minimum": 22,
                                                        "maximum": 32,
                                                        "description": "Latitude (between 22 and 32)"
                                                    }
                                                ],
                                                "description": "[longitude, latitude] coordinates"
                                            }
                                        },
                                        "required": ["type", "coordinates"],
                                        "description": "Geo location of the nursery in GeoJSON format"
                                    },
                                    "image": {
                                        "type": "string",
					                    "format": "binary",
                                        "description": "It is a file with extension jpg, png or jpeg and less than 5MB",
                                        "example": "6cd41bd6c67f6a7c89f1a5f73f86d193.jpg"
                                    },
                                    "plantedRecently": {
                                        "type": "boolean",
                                        "description": "The default is false except for the mandatory request after verifying the response to the report type (place needs tree)",
                                        "example": true
                                    }
                                },
                                "required": ["treeLocation", "treeName", "image"]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree located successfully"
                                        }
                                    }
                                    
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If user enters something that conflicts with the validation rules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Location must be a Point"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "location.type"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "body"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403":{
                        "summary": "The user who requested is not the owner of the ID in the path",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/users/{id}/promote-admin": {
            "put": {
                "tags": ["Users"],
                "summary": "Promote user to admin, vice versa",
                "description": "Promote user to admin or demote admin to user",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "67da1529cd23e1273a0dbfa2"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User promoted to admin successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID Format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Invalid user ID Format"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "id"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "path"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Admin privileges are required to access this route"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}/task": {
            "post": {
                "summary": "Create a new task for a user and a tree",
                "description": "Allows an authenticated user to create a new task associated with one of their recently planted trees",
                "tags": ["Care"],
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "User ID",
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "67da1529cd23e1273a0dbfa2"
                    }
                }],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "treeID": {
                                        "type": "string",
                                        "format": "objectid",
                                        "description": "ID of the tree to associate the task with. The tree must be recently planted by the user",
                                        "example": "67da1529cd23e1273a0dbfb3"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "Title or description of the task.",
                                        "enum": ["Water the tree", "Prune dead branches", "Fertilize the soil", "Check for pests"],
                                        "example": "Water the tree"
                                    }
                                },
                                "required": ["treeID", "title"]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task created successfully"
                                        },
                                        "task": {
                                            "type": "string",
                                            "description": "The title of the created task.",
                                            "example": "Water the Ficus tree"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error or task already exists for today",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Tree ID is required"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "treeID"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "body"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid token, session expired, or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not authorized to create a task for this tree (e.g., tree not owned by user, or not recently planted) or path ID mismatch.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This tree not belongs to this user"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User or Tree not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Get user's trees with their tasks for today",
                "description": "Retrieves a list of specified trees for a user, along with their pending and completed tasks for the current day",
                "tags": ["Care"],
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "User ID",
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "67da1529cd23e1273a0dbfa2"
                    }
                }],
                "requestBody": {
                    "description": "Specifies the tree IDs for which to retrieve tasks",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "treeIDs": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "objectid"
                                        },
                                        "description": "An array of Tree IDs for which to fetch tasks.",
                                        "example": ["67da1529cd23e1273a0dbfb3", "67da1529cd23e1273a0dbfb4"]
                                    }
                                },
                                "required": ["treeIDs"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation. Returns tasks grouped by tree or a message if no tasks exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "type": "array",
                                            "description": "Array of trees with their tasks for today. Empty if no tasks for specified trees.",
                                            "items": {
                                                "$ref": "#/components/schemas/TreeWithTasks"
                                            }
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "There are no tasks today"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "user enters something that conflicts with the validation rules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Tree IDs must be unique"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "treeIDs"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "body"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid token, session expired, or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The user who requested is not the owner of the tasks",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}/events": {
            "get": {
                "tags": ["Users"],
                "summary": "Get user's interested events",
                "description": "Retrieves all events a specified user is interested in, sorted by creation date (newest first) and Excludes events with status 'cancelled' or 'completed'",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID for whom to fetch interested events",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67da1529cd23e1273a0dbfa2"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of events per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 6,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "length": {
                                            "type": "integer",
                                            "description": "Number of events returned on the current page",
                                            "example": 3
                                        },
                                        "page": {
                                            "type": "integer",
                                            "description": "The current page number",
                                            "example": 1
                                        },
                                        "events": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/EventResponseItem"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Invalid token, session expired, or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tasks/{id}": {
            "post": {
                "tags": ["Care"],
                "summary": "Mark task",
                "description": "Mark task as done or cancel it",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Task ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "679d586f1ea9acf426404abc"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task marked as done successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID Format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Invalid task ID Format"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "id"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "path"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403":{
                        "summary": "The user who requested is not the owner of the task",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Care"],
                "summary": "Delete task",
                "description": "Delete specific task",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "example": "679d586f1ea9acf426404abc"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {    
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task deleted successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID Format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Invalid task ID Format"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "id"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "path"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task not found"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403":{
                        "summary": "The user who requested is not the owner of the task",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tasks/{id}/delete-all-tasks": {
            "delete": {
                "tags": ["Care"],
                "summary": "Delete all tasks of a tree",
                "description": "Delete all tasks of a tree",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Tree ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "679d586f1ea9acf426404abc"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {    
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tasks deleted successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID Format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Invalid tree ID Format"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "id"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "path"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403":{
                        "summary": "The user who requested is not the owner of the tree",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "Tree not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/search/home/{key}": {
            "get": {
                "tags": ["Search"],
                "summary": "Search home",
                "description": "Search for events or nurseries in the home",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "key",
                    "in": "path",
                    "description": "Anything you want to search for",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "example": "test"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Events": {
                                            "oneOf": [
                                                {
                                                    "type": "array",
                                                    "description": "Array of event objects",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Event"
                                                    }
                                                },
                                                {
                                                    "type": "string",
                                                    "description": "Message indicating no events found",
                                                    "example": "No events found"
                                                }
                                            ]
                                        },
                                        "Nurseries": {
                                            "oneOf": [
                                                {
                                                    "type": "string",
                                                    "description": "Message indicating no nurseries found",
                                                    "example": "No nurseries found"
                                                },
                                                {
                                                    "type": "array",
                                                    "description": "Array of nursery objects",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Nursery"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No results found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No results found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/search/community/{key}": {
            "get": {
                "tags": ["Search"],
                "summary": "Search community",
                "description": "Search for users or reports in the community",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "key",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "example": "hagar"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Users": {
                                            "oneOf": [
                                                {
                                                    "type": "array",
                                                    "description": "Array of user objects",
                                                    "items": {
                                                        "$ref": "#/components/schemas/User"
                                                    }
                                                },
                                                {
                                                    "type": "string",
                                                    "description": "Message indicating no users found",
                                                    "example": "No users found"
                                                }
                                            ]
                                        },
                                        "Reports": {
                                            "oneOf": [
                                                {
                                                    "type": "string",
                                                    "description": "Message indicating no reports found",
                                                    "example": "No reports found"
                                                },
                                                {
                                                    "type": "array",
                                                    "description": "Array of report objects",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Report"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "No results found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No results found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/nursery/": {
            "get": {
                "tags": ["Nurseries"],
                "summary": "Get all nurseries (pagination)",
                "description": "Display all nurseries registered in the application in the form of pages. Each page displays a specific number of elements that you will specify as a parameter",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description" : "The number of the page",
                        "require" : "false",
                        "schema":{
                            "type": "number",
                            "format": "integer",
                            "default": 1,
                            "validation": "From 1 to (total number of elements / number of elements on one page)"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description" : "The number of elements on one page",
                        "require" : "false",
                        "schema":{
                            "type": "number",
                            "default": 5
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "length": {
                                            "type": "integer",
                                            "description": "Number of nurseries in the current page",
                                            "example": 6
                                        },
                                        "page": {
                                            "type": "integer",
                                            "description": "Current page number",
                                            "example": 1
                                        },
                                        "nurseries": {
                                            "type": "array",
                                            "description": "List of nurseries",
                                            "items": {
                                                "$ref": "#/components/schemas/Nursery"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/nursery/{id}": {
            "get":{
                "tags": ["Nurseries"],
                "summary": "Get specific nursery",
                "description": "Get specific nursery page by its id",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Nursery ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "67a53b762d3889664beff056"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Nursery"
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "Nursery not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Nursery not found"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/events": {
            "get": {
                "tags": ["Events"],
                "summary": "Get all events (paginated and filterable)",
                "description": "Displays all events, paginated. Supports filtering by user location (sorted by proximity within 50km) and time period (thisWeek, nextWeek, thisMonth)",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page to retrieve",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of events to return per page. Defaults to 6.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 6,
                            "minimum": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "Optional filters for events",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "location": {
                                        "description": "GeoJSON Point for user-location-based filtering. Filters events within 50km and sorts by distance",
                                        "type": "object",
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "enum": ["Point"],
                                                "description": "GeoJSON type, must be 'Point'",
                                                "example": "Point"
                                            },
                                            "coordinates": {
                                                "type": "array",
                                                "description": "Array of [longitude, latitude]. Longitude (24 to 37), Latitude (22 to 32)",
                                                "items": {
                                                "type": "number",
                                                "format": "float"
                                                },
                                                "minItems": 2,
                                                "maxItems": 2,
                                                "example": [31.20886, 30.07694]
                                            }
                                        },
                                        "required": ["type", "coordinates"]
                                    
                                    },
                                    "timeFilter": {
                                        "type": "string",
                                        "enum": ["thisWeek", "nextWeek", "thisMonth"],
                                        "description": "Filter events by a specific time period",
                                        "example": "thisWeek"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "length": {
                                            "type": "integer",
                                            "description": "Number of events in the current page",
                                            "example": 6
                                        },
                                        "page": {
                                            "type": "integer",
                                            "description": "Current page number",
                                            "example": 1
                                        },
                                        "events": {
                                            "type": "array",
                                            "description": "List of events matching the criteria",
                                            "items": {
                                                "$ref": "#/components/schemas/EventResponseItem"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error - Invalid input for filters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid time filter"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/event/{id}": {
            "get":{
                "tags": ["Events"],
                "summary": "Get specific event",
                "description": "Get specific event page by its id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Event ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "672fc5bbfdc6d15f778e25d7"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "Event not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Event not found"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/events/{id}/interested": {
            "post": {
                "tags": ["Events"],
                "summary": "Add an interested user to an event",
                "description": "Allows an authenticated user to mark themselves as interested in a specific event",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the event.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "615d8f8b8f8f8f8f8f8f8f01"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The ID of the user to be marked as interested",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "interestedUser": {
                                        "type": "string",
                                        "format": "objectid",
                                        "description": "The User ID to add to the interested list",
                                        "example": "67da1529cd23e1273a0dbfa2"
                                    }
                                },
                                "required": ["interestedUser"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User added successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid event ID format, or missing/invalid `interestedUser` in the request body",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": { 
                                                        "type": "string",
                                                        "example": "interestedUser is required" 
                                                    },
                                                    "param": { 
                                                        "type": "string", 
                                                        "example": "interestedUser" 
                                                    },
                                                    "location": {
                                                        "type": "string", 
                                                        "example": "body" 
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Invalid token, session expired, or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Event was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Event not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Events"],
                "summary": "Remove an interested user from an event",
                "description": "Allows an authenticated user to remove themselves from the interested list of a specific even",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the event.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "615d8f8b8f8f8f8f8f8f8f01"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The ID of the user to be removed from the interested list",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "interestedUser": {
                                        "type": "string",
                                        "format": "objectid",
                                        "description": "The User ID to remove from the interested list",
                                        "example": "67da1529cd23e1273a0dbfa2"
                                    }
                                },
                                "required": ["interestedUser"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User removed successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid event ID format, or missing/invalid `interestedUser` in the request body",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": { 
                                                        "type": "string", 
                                                        "example": "Invalid event ID Format" 
                                                    },
                                                    "param": { 
                                                        "type": "string", 
                                                        "example": "id" 
                                                    },
                                                    "location": { 
                                                        "type": "string", 
                                                        "example": "path" 
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Invalid token, session expired, or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Event was not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Event not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/trees": {
            "get": {
                "summary": "Get all trees",
                "description": "Retrieves trees with optional filters",
                "tags": ["Trees"],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "required": false,
                        "description": "Filters for trees",
                        "schema": {
                            "type": "string",
                            "example": "{\"healthStatus\":\"Healthy\"}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "length": {
                                            "type": "integer",
                                            "description": "Number of trees",
                                            "example": 5
                                        },
                                        "trees": {
                                            "type": "array",
                                            "description": "List of trees",
                                            "items": {
                                                "$ref": "#/components/schemas/Tree"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/trees/{id}": {
            "get": {
                "summary": "Get tree by ID",
                "description": "Retrieves a specific tree by its ID",
                "tags": ["Trees"],
                "security": [{
                    "BearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Tree ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67978b5804bb6348dd0f63cf"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tree"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID Format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Invalid tree ID Format"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "id"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "path"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token, session expired, or unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tree not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update tree information",
                "description": "Update specific tree properties such as name, health status, or location",
                "tags": ["Trees"],
                "security": [{
                    "BearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Tree ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67978b5804bb6348dd0f63cf"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "treeName": {
                                        "type": "string",
                                        "example": "tree 1"
                                    },
                                    "healthStatus": {
                                        "type": "string",
                                        "enum": ["Healthy", "Diseased", "Dying"],
                                        "example": "Dying"
                                    },
                                    "problem": {
                                        "type": "string",
                                        "example": "Tree is lacking water"
                                    },
                                    "treeLocation": {
                                        "type": "object",
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "enum": ["Point"],
                                                "example": "Point"
                                            },
                                            "coordinates": {
                                                "type": "array",
                                                "items": {
                                                "type": "number"
                                                },
                                                "example": [31.2001, 29.9187]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree updated successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error - user enters something that conflicts with the validation rules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid tree location format"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token, session expired, or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tree not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a tree",
                "description": "Remove a tree from the database and store its details in the trash collection",
                "tags": ["Trees"],
                "security": [{
                    "BearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "ID of the tree to delete",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67978b5804bb6348dd0f63cf"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "deletionReason": {
                                        "type": "string",
                                        "enum": ["Died", "Cut", "False Record"],
                                        "example": "Died"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree deleted successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error - missing or invalid deletion reason",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Deletion reason is required and must be either 'Died', 'Cut', or 'False Record'"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token, session expired, or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please login"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tree not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/trees/{id}/image": {
            "patch": {
                "summary": "Upload tree image",
                "description": "Allows uploading an image (png / jpg / jpeg) for a specific tree to update it",
                "tags": ["Trees"],
                "security": [{
                    "BearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Tree ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67978b5804bb6348dd0f63cf"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Picture updated successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing image file or unexpected file extension)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Image is required."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token, session expired, or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tree not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/trees/location": {
            "get": {
                "summary": "Get trees by location",
                "description": "Retrieves trees within a 10-meter radius of the specified geographical point",
                "tags": ["Trees"],
                "operationId": "getTreesByLocation",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["location"],
                                "properties": {
                                    "location": {
                                        "type": "object",
                                        "required": ["type", "coordinates"],
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "enum": ["Point"],
                                                "default": "Point",
                                                "description": "The GeoJSON type of the location",
                                                "example": "Point"
                                            },
                                            "coordinates": {
                                                "type": "array",
                                                "items": {
                                                    "type": "number",
                                                    "format": "double"
                                                },
                                                "minItems": 2,
                                                "maxItems": 2,
                                                "description": "Array of [longitude, latitude]. Longitude must be between 24 and 37. Latitude must be between 22 and 32",
                                                "example": [25.12345, 30.54321]
                                            }
                                        },
                                        "description": "GeoJSON Point object representing the location to search around"
                                    }
                                }
                            }
                        }
                    },
                    "description": "Location object to find nearby trees. Even though this is a GET request, the current implementation expects the location in the request body"
                },
                "responses": {
                    "200": {
                        "description": "Successfully operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "length": {
                                            "type": "integer",
                                            "description": "Number of trees found",
                                            "example": 5
                                        },
                                        "trees": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Tree"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input for location",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "msg": {
                                                        "type": "string",
                                                        "example": "Location must be a Point"
                                                    },
                                                    "param": {
                                                        "type": "string",
                                                        "example": "location.type"
                                                    },
                                                    "location": {
                                                        "type": "string",
                                                        "example": "body"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token, session expired, or unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/coupons/available": {
            "get": {
                "tags": ["Rewards"],
                "summary": "Get available coupons for the authenticated user",
                "description": "Retrieves a list of coupons that the authenticated user can afford based on their current points",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of coupons per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "length": {
                                            "type": "integer",
                                            "description": "Number of coupons returned on the current page",
                                            "example": 5
                                        },
                                        "page": {
                                            "type": "integer",
                                            "description": "The current page number",
                                            "example": 1
                                        },
                                        "coupons": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AvailableCouponItem"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Invalid token, session expired, or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/coupons/{id}/redeem": {
            "get": {
                "tags": ["Rewards"],
                "summary": "Redeem a specific coupon",
                "description": "Allows an authenticated user to redeem a coupon using their points. The coupon cost is deducted from the user's points, and a unique code from the coupon is assigned to the user",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the coupon to redeem one code",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "68210b6688ecfbf7b3d7dfb8"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Coupon redeemed successfully"
                                        },
                                        "redeemed_coupon": {
                                            "$ref": "#/components/schemas/RedeemedCouponDetails"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid coupon ID format, or the user does not have enough points to redeem the coupon",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "errors": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "msg": { 
                                                                "type": "string", 
                                                                "example": "Invalid coupon ID Format" 
                                                            },
                                                            "param": { 
                                                                "type": "string", 
                                                                "example": "id" 
                                                            },
                                                            "location": { 
                                                                "type": "string", 
                                                                "example": "path" 
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "Not enough points"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Invalid token, session expired, or password recently changed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Coupon was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Coupon not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "JWT token for authentication. Example: 'Bearer {token}'"
            }
        },
        "schemas": {
            "Nursery": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "format": "objectid",
                        "description": "Unique identifier for the nursery",
                        "example": "67a53b762d3889664beff056"
                    },
                    "nurseryName": {
                        "type": "string",
                        "description": "Name of the nursery",
                        "example": "يورودريب ايجيبت"
                    },
                    "address": {
                        "type": "string",
                        "description": "Address of the nursery",
                        "example": "164 شارع الهرم – الجيزة – مصر."
                    },
                    "location": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": ["Point"],
                                "example": "Point",
                                "description": "GeoJSON type (always 'Point' for coordinates)"
                            },
                            "coordinates": {
                                "type": "array",
                                "minItems": 2,
                                "maxItems": 2,
                                "example": [31.20886, 30.07694],
                                "prefixItems": [
                                    {
                                        "type": "number",
                                        "minimum": 24,
                                        "maximum": 37,
                                        "description": "Longitude (between 24 and 37)"
                                    },
                                    {
                                        "type": "number",
                                        "minimum": 22,
                                        "maximum": 32,
                                        "description": "Latitude (between 22 and 32)"
                                    }
                                ],
                                "description": "[longitude, latitude] coordinates"
                            }
                        },
                        "required": ["type", "coordinates"],
                        "description": "Geo location of the nursery in GeoJSON format"
                    },
                    "rate": {
                        "type": "number",
                        "format": "float",
                        "description": "Rate of the nursery on Google Maps",
                        "example": 4.5,
                        "minimum": 0,
                        "maximum": 5
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the nursery was created",
                        "example": "2024-12-03T19:04:18.280Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the nursery was last updated",
                        "example": "2025-01-29T11:28:48.753Z"
                    }
                },
                "required": [
                    "nurseryName",
                    "address",
                    "location",
                    "rate"
                ]
            },
            "Event": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "format": "objectid",
                        "description": "Unique identifier for the event",
                        "example": "672fc5bbfdc6d15f778e25d7"
                    },
                    "location": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": ["Point"],
                                "example": "Point",
                                "description": "GeoJSON type (always 'Point' for coordinates)"
                            },
                            "coordinates": {
                                "type": "array",
                                "minItems": 2,
                                "maxItems": 2,
                                "example": [31.20886, 30.07694],
                                "prefixItems": [
                                    {
                                        "type": "number",
                                        "minimum": 24,
                                        "maximum": 37,
                                        "description": "Longitude (between 24 and 37)"
                                    },
                                    {
                                        "type": "number",
                                        "minimum": 22,
                                        "maximum": 32,
                                        "description": "Latitude (between 22 and 32)"
                                    }
                                ],
                                "description": "[longitude, latitude] coordinates"
                            }
                        },
                        "required": ["type", "coordinates"],
                        "description": "Geo location of the nursery in GeoJSON format"
                    },
                    "eventImage": {
                        "type": "string",
                        "format": "uri",
                        "example": "../uploads/not-found-image.png"
                    } ,
                    "eventName": {
                        "type": "string",
                        "example": "spring"
                    },
                    "eventDate": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-12-31T22:00:00.000Z"
                    },
                    "description": {
                        "type": "string",
                        "example": "description"
                    },
                    "eventStatus": {
                        "type": "string",
                        "enum": ["upcoming", "ongoing", "completed", "cancelled"],
                        "example": "completed"
                    },
                    "organizedWithPartnerID": {
                        "type": "string",
                        "format": "objectid",
                        "description": "The ID of the partner who organized the event",
                        "example": "6712c34869c17428b80a63c6"
                    },
                    "interestedIn": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "objectid",
                            "description": "Array of user IDs who are interested in the event"
                        },
                        "example": ["67da1529cd23e1273a0dbfa2"]
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the event was created",
                        "example": "2024-12-03T19:04:18.280Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the event was last updated",
                        "example": "2025-01-29T11:28:48.753Z"
                    }
                },
                "required": [
                    "eventName",
                    "eventDate",
                    "description",
                    "location",
                    "eventStatus",
                    "organizedWithPartnerID"
                ]
            },
            "EventResponseItem": {
                "type": "object",
                "description": "Structure of an event item as returned in the list. Based on the $project stage",
                "properties": {
                    "_id": {
                        "type": "string",
                        "format": "objectid",
                        "description": "Event ID",
                        "example": "67da1529cd23e1273a0ebfa4"
                    },
                    "eventName": {
                        "type": "string",
                        "description": "Name of the event.",
                        "example": "Community Tree Planting Day"
                    },
                    "eventDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date and time of the event",
                        "example": "2024-03-15T10:00:00Z"
                    },
                    "location": {
                        "type": "object",
                        "description": "GeoJSON location of the event",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": ["Point"],
                                "example": "Point"
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "type": "number",
                                    "format": "float"
                                },
                                "example": [31.20000, 30.00000]
                            }
                        }
                    },
                    "city": {
                        "type": "string",
                        "description": "City where the event takes place",
                        "example": "Cairo"
                    },
                    "eventImage": {
                        "type": "string",
                        "format": "uri",
                        "description": "URL of the event's image",
                        "example": "../uploads/event.png"
                    },
                    "interestedCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of users interested in this event",
                        "example": 25
                    }
                }
            },
            "User": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "format": "objectid",
                        "description": "Unique identifier for the user",
                        "example": "67da1529cd23e1273a0dbfa2"
                    },
                    "username": {
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 15,
                        "example": "Hagar"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "unique": true,
                        "example": "hagarelessawy0@gmail.com"
                    },
                    "password": {
                        "type": "string",
                        "minLength": 8,
                        "example": "12345678",
                        "description": "Password hashed using bcrypt"
                    },
                    "passwordChangedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the user's password was last changed",
                        "example": "2025-01-27T13:34:16.460Z"
                    },
                    "profilePic": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://res.cloudinary.com/dvlao566z/image/upload/v1733439630/kjhjxq357ujwlaefpg53.jpg"
                    },
                    "points": {
                        "type": "number",
                        "format": "integer",
                        "example": 20
                    },
                    "pointsHistory": {
                        "type": "array",
                        "description": "Array of user's points history",
                        "items": {
                            "type": "object",
                            "properties": {
                                "activity": {
                                    "type": "string",
                                    "enum": ["locate", "report", "care", "plant"],
                                    "example": "locate",
                                    "description": "Type of activity that earned points"
                                },
                                "points": {
                                    "type": "number",
                                    "example": 5,
                                    "description": "Points earned from the activity"
                                },
                                "date": {
                                    "type": "string",
                                    "format": "date-time",
                                    "example": "2025-01-27T13:34:16.460Z",
                                    "description": "When the activity was recorded"
                                },
                                "img": {
                                    "type": "string",
                                    "format": "uri",
                                    "example": "../uploads/locate.png",
                                    "description": "Image related to the activity"
                                }
                            },
                            "required": ["activity", "points", "date", "img"]
                        }
                    },
                    "role": {
                        "type": "string",
                        "enum": ["admin", "user"],
                        "default": "user",
                        "example": "user"
                    },
                    "isVerified": {
                        "type": "boolean",
                        "description": "Indicates whether the user email is verified or not",
                        "default": false,
                        "example": false
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Indicates whether the user is active (logged in) or not (logged out)",
                        "example": true
                    },
                    "address": {
                        "type": "string",
                        "example": "164 شارع الهرم – الجيزة – مصر."
                    },
                    "location": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": ["Point"],
                                "example": "Point",
                                "description": "GeoJSON type (always 'Point' for coordinates)"
                            },
                            "coordinates": {
                                "type": "array",
                                "minItems": 2,
                                "maxItems": 2,
                                "example": [31.20886, 30.07694],
                                "prefixItems": [
                                    {
                                        "type": "number",
                                        "minimum": 24,
                                        "maximum": 37,
                                        "description": "Longitude (between 24 and 37)"
                                    },
                                    {
                                        "type": "number",
                                        "minimum": 22,
                                        "maximum": 32,
                                        "description": "Latitude (between 22 and 32)"
                                    }
                                ],
                                "description": "[longitude, latitude] coordinates"
                            }
                        },
                        "required": ["type", "coordinates"],
                        "description": "Geo location of the nursery in GeoJSON format"
                    },
                    "savedReports": {
                        "type": "array",
                        "description": "Array of saved report IDs (references to Report model)",
                        "items": {
                            "type": "string",
                            "format": "objectid",
                            "example": "65f1a9d3e4b8c12a3c4d5e6f"
                        },
                        "default": []
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-12-03T19:04:18.280Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-01-29T11:28:48.753Z"
                    }
                },
                "required": ["name", "email", "password"]
            },
            "Coupon": {
                "type": "object",
                "properties": {
                    "codes": {
                        "type": "array",
                        "description": "Array of coupon codes",
                        "example": ["1H4k3T6J0", "S52VE10H8"],
                        "uniqueItems": true,
                        "minItems": 1,
                        "items": {
                            "type": "string",
                            "description": "Unique coupon code",
                            "minLength": 9,
                            "maxLength": 9
                        }
                    },
                    "value": {
                        "type": "number",
                        "description": "Discount value of the coupon",
                        "example": 20
                    },
                    "brand": {
                        "type": "string",
                        "format": "objectid",
                        "description": "Reference to Brand that owns the coupon",
                        "example": "507f1f77bcf86cd799439011"
                    },
                    "cost": {
                        "type": "number",
                        "description": "Points cost to redeem coupon",
                        "minimum": 50,
                        "example": 70,
                        "exclusiveMinimum": true
                    },
                    "usedCodes": {
                        "type": "array",
                        "description": "Array of redeemed coupon codes by users",
                        "items": {
                            "type": "object",
                            "properties": {
                                "user": {
                                    "type": "string",
                                    "format": "objectid",
                                    "description": "Reference to User who redeemed",
                                    "example": "507f1f77bcf86cd799439012"
                                },
                                "code": {
                                    "type": "string",
                                    "description": "Redeemed coupon code",
                                    "example": "1H4k3T6J0"
                                },
                                "redeemedAt": {
                                    "type": "string",
                                    "format": "date-time",
                                    "description": "Redemption timestamp",
                                    "example": "2023-05-20T12:00:00Z"
                                }
                            }
                        }
                    },
                    "expiryDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Coupon expiration date. it should be after creation date",
                        "example": "2023-12-31T23:59:59Z"
                    },
                    "addByAdmin": {
                        "type": "string",
                        "format": "objectid",
                        "description": "Admin who added the coupon",
                        "example": "507f1f77bcf86cd799439013"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Auto-generated creation timestamp",
                        "example": "2023-05-20T10:00:00Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Auto-generated update timestamp",
                        "example": "2023-05-20T10:30:00Z"
                    }
                },
                "required": ["codes", "value", "brand", "cost", "expiryDate", "addByAdmin"]
            },
            "AvailableCouponItem": {
                "type": "object",
                "description": "Details of an available coupon, including populated brand information",
                "properties": {
                    "_id": {
                        "type": "string",
                        "format": "objectid",
                        "example": "68210b6688ecfbf7b3d7dfb8"
                    },
                    "value": {
                        "type": "number",
                        "description": "The monetary value or discount percentage of the coupon",
                        "example": 10
                    },
                    "cost": {
                        "type": "integer",
                        "description": "The number of points required to redeem this coupon",
                        "example": 50
                    },
                    "brand": {
                        "type": "object",
                        "description": "Details of the partner/brand offering the coupon",
                        "properties": {
                            "_id": {
                                "type": "string",
                                "format": "objectid",
                                "example": "68210b6688ecfbf7b3d7dfb8"
                            },
                            "partnerName": {
                                "type": "string",
                                "example": "Noon"
                            },
                            "logo": {
                                "type": "string",
                                "format": "url",
                                "example": "https://res.cloudinary.com/dvlao566z/image/upload/v1745668307/o7kigoqfe9sr56qhvcsl.png"
                            }
                        },
                        "required": ["_id", "partnerName"]
                    }
                },
                "required": ["_id", "value", "cost", "brand"]
            },
            "RedeemedCouponDetails": {
                "type": "object",
                "description": "Details of the coupon after successful redemption",
                "properties": {
                    "brand": {
                        "type": "object",
                        "description": "Details of the partner/brand offering the coupon",
                        "properties": {
                            "_id": {
                                "type": "string",
                                "format": "objectid",
                                "example": "68210b6688ecfbf7b3d7dfb8"
                            },
                            "partnerName": {
                                "type": "string",
                                "example": "Noon"
                            },
                            "logo": {
                                "type": "string",
                                "format": "url",
                                "example": "https://res.cloudinary.com/dvlao566z/image/upload/v1745668307/o7kigoqfe9sr56qhvcsl.png"
                            }
                        }
                    },
                    "code": {
                        "type": "string",
                        "description": "The unique code from the coupon that the user can use",
                        "example": "XMAS2024S"
                    },
                    "expiryDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The expiry date of the coupon",
                        "example": "2024-12-31T23:59:59Z"
                    },
                    "value": {
                        "type": "number",
                        "description": "The monetary value or discount percentage of the coupon",
                        "example": 10
                    },
                    "cost": {
                        "type": "integer",
                        "description": "The number of points that were required to redeem this coupon",
                        "example": 50
                    }
                },
                "required": ["brand", "code", "expiryDate", "value", "cost"]
            },
            "Report": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "format": "objectid",
                        "example": "67978c5004bb6348dd0f63da",
                        "description": "Unique identifier for the report"
                    },
                    "location": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": ["Point"],
                                "example": "Point",
                                "description": "GeoJSON type (always 'Point' for coordinates)"
                            },
                            "coordinates": {
                                "type": "array",
                                "minItems": 2,
                                "maxItems": 2,
                                "example": [31.20886, 30.07694],
                                "prefixItems": [
                                    {
                                        "type": "number",
                                        "minimum": 24,
                                        "maximum": 37,
                                        "description": "Longitude (between 24 and 37)"
                                    },
                                    {
                                        "type": "number",
                                        "minimum": 22,
                                        "maximum": 32,
                                        "description": "Latitude (between 22 and 32)"
                                    }
                                ],
                                "description": "[longitude, latitude] coordinates"
                            }
                        },
                        "required": ["type", "coordinates"],
                        "description": "Geo location of the nursery in GeoJSON format"
                    },
                    "reportType": {
                        "type": "string",
                        "enum": ["A tree needs care", "A place needs tree", "Other"],
                        "example": "A tree needs care",
                        "description": "Type of the report"
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 500,
                        "example": "The tree is damaged and needs care",
                        "description": "Detailed description of the issue"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri",
                            "example": "https://res.cloudinary.com/example/image.jpg",
                            "description": "URL of the uploaded image"
                        },
                        "description": "Array of image URLs related to the report"
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "objectid",
                        "example": "67da1529cd23e1273a0dbfa2",
                        "description": "User ID who created the report"
                    },
                    "treeID": {
                        "type": "string",
                        "format": "objectid",
                        "example": "6797bb1235f66e923435a858",
                        "description": "Reference to the related tree (if applicable for 'A tree needs care' reports)"
                    },
                    "upVotes": {
                        "type": "integer",
                        "minimum": 0,
                        "example": 5,
                        "description": "Number of up votes the report received"
                    },
                    "upVoters": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67da1529cd23e1273a0dbfa2",
                            "description": "User ID who upvoted"
                        },
                        "description": "Array of users who upvoted this report"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["Pending", "In Progress", "Resolved", "Awaiting Verification"],
                        "example": "Pending",
                        "description": "Current status of the report"
                    },
                    "responses": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "objectid",
                            "example": "6798c650f0ddb44f0d7ef905",
                            "description": "Response ID"
                        },
                        "description": "Array of responses to this report"
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "objectid",
                            "example": "6797904c10d099e3275e0ba6",
                            "description": "Comment ID"
                        },
                        "description": "Array of comments on this report"
                    },
                    "modificationHistory": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "oldData": {
                                    "type": "object",
                                    "properties": {
                                        "reportType": {
                                            "type": "string",
                                            "example": "A tree needs care"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "Previous description"
                                        },
                                        "location": {
                                            "type": "object",
                                            "properties": {
                                                "type": {
                                                    "type": "string",
                                                    "enum": ["Point"],
                                                    "example": "Point",
                                                    "description": "GeoJSON type (always 'Point' for coordinates)"
                                                },
                                                "coordinates": {
                                                    "type": "array",
                                                    "minItems": 2,
                                                    "maxItems": 2,
                                                    "example": [31.20886, 30.07694],
                                                    "prefixItems": [
                                                        {
                                                            "type": "number",
                                                            "minimum": 24,
                                                            "maximum": 37,
                                                            "description": "Longitude (between 24 and 37)"
                                                        },
                                                        {
                                                            "type": "number",
                                                            "minimum": 22,
                                                            "maximum": 32,
                                                            "description": "Latitude (between 22 and 32)"
                                                        }
                                                    ],
                                                    "description": "[longitude, latitude] coordinates"
                                                }
                                            },
                                            "required": ["type", "coordinates"],
                                            "description": "Geo location of the nursery in GeoJSON format"
                                        },
                                        "images": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "format": "uri"
                                            }
                                        },
                                        "treeID": {
                                            "type": "string",
                                            "format": "objectid"
                                        },
                                        "createdAt": {
                                            "type": "string",
                                            "format": "date-time"
                                        }
                                    },
                                    "description": "Previous data before modification"
                                },
                                "updatedAt": {
                                    "type": "string",
                                    "format": "date-time",
                                    "example": "2025-01-27T17:08:06.033Z",
                                    "description": "When the modification was made"
                                }
                            },
                            "required": ["oldData", "updatedAt"]
                        },
                        "description": "History of changes made to the report"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-01-27T13:38:24.412Z",
                        "description": "When the report was created"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-01-28T11:58:08.371Z",
                        "description": "When the report was last updated"
                    }
                },
                "required": [
                "reportType",
                "description",
                "images",
                "createdBy",
                "status"
                ],
                "description": "A report about tree-related issues or places for tree planting"
            },
            "Tree": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "format": "objectid",
                        "description": "Unique identifier for the tree",
                        "example": "67978b5804bb6348dd0f63cf"
                    },
                    "treeName": {
                        "type": "string",
                        "maxLength": 15,
                        "description": "Name of the tree (max 15 characters)",
                        "example": "Acacia"
                    },
                    "treeLocation": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": ["Point"],
                                "example": "Point",
                                "description": "GeoJSON type (always 'Point' for coordinates)"
                            },
                            "coordinates": {
                                "type": "array",
                                "minItems": 2,
                                "maxItems": 2,
                                "example": [31.20886, 30.07694],
                                "prefixItems": [
                                    {
                                        "type": "number",
                                        "minimum": 24,
                                        "maximum": 37,
                                        "description": "Longitude (between 24 and 37)"
                                    },
                                    {
                                        "type": "number",
                                        "minimum": 22,
                                        "maximum": 32,
                                        "description": "Latitude (between 22 and 32)"
                                    }
                                ],
                                "description": "[longitude, latitude] coordinates"
                            }
                        },
                        "required": ["type", "coordinates"],
                        "description": "Geo location of the nursery in GeoJSON format"
                    },
                    "healthStatus": {
                        "type": "string",
                        "enum": ["Healthy", "Needs Care"],
                        "description": "Current health status of the tree (Needs Care stats if there a pending report about it)",
                        "default": "Healthy",
                        "example": "Healthy"
                    },
                    "problem": {
                        "type": "string",
                        "format": "objectid",
                        "description": "Reference to the pending report about this tree if there is one",
                        "example": "507f1f77bcf86cd799439011"
                    },
                    "image": {
                        "type": "string",
                        "format": "uri",
                        "description": "URL of the tree image",
                        "example": "https://example.com/tree-image.jpg"
                    },
                    "plantedRecently": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether the tree was planted by our community or not",
                        "example": true
                    },
                    "byUser": {
                        "type": "string",
                        "format": "objectid",
                        "description": "Reference to the user who planted the tree or just locate it",
                        "example": "67da1529cd23e1273a0dbfa2"
                    },
                    "reportsAboutIt": {
                        "type": "object",
                        "properties": {
                            "resolved": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "objectid",
                                    "example": "507f1f77bcf86cd799439011"
                                },
                                "description": "Array of resolved reports about this tree"
                            },
                            "unresolved": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "objectid",
                                    "example": "507f1f77bcf86cd799439012"
                                },
                                "description": "Array of unresolved reports about this tree"
                                }
                        },
                        "default": {
                            "resolved": [],
                            "unresolved": []
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the tree was created",
                        "example": "2025-01-27T13:34:16.460Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the tree was last updated",
                        "example": "2025-01-27T17:15:22.357Z"
                    }
                },
                "required": ["treeName", "treeLocation", "byUser", "image"]
            },
            "Task": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "format": "objectid",
                        "description": "Unique identifier for the task",
                        "example": "67a55b87a5cec1ecb8cdfd2c"
                    },
                    "title": {
                        "type": "string",
                        "description": "Type of task to be performed",
                        "enum": ["Water the tree", "Prune dead branches", "Check for pests", "Fertilize the soil"],
                        "example": "Prune dead branches"
                    },
                    "tree": {
                        "type": "string",
                        "format": "objectid",
                        "description": "ID of the tree associated with the task",
                        "example": "67978b5804bb6348dd0f63cf"
                    },
                    "user": {
                        "type": "string",
                        "format": "objectid",
                        "description": "Reference to User assigned to the task",
                        "example": "67da1529cd23e1273a0dbfa2"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date and time when the task is due",
                        "example": "2025-02-07T01:01:59.429Z"
                    },
                    "isDone": {
                        "type": "boolean",
                        "default": false,
                        "description": "Indicates whether the task is completed",
                        "example": false
                    }
                },
                "description": "A task assigned to a user for tree maintenance",
                "required": ["title", "tree", "user", "date"]
            },
            "TreeWithTasks": {
                "type": "object",
                "properties": {
                    "treeID": {
                        "type": "string",
                        "format": "objectid",
                        "description": "ID of the tree",
                        "example": "67da1529cd23e1273a0dbfb3"
                    },
                    "treeName": {
                        "type": "string",
                        "description": "Name of the tree",
                        "example": "tree 1"
                    },
                    "pendingTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Task"
                        },
                        "description": "List of tasks that are not yet completed for today"
                    },
                    "completedTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Task"
                        },
                        "description": "List of tasks that have been completed today"
                    },
                    "totalCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total number of tasks for this tree today",
                        "example": 5
                    },
                    "completedCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of completed tasks for this tree today",
                        "example": 2
                    }
                }
            }
        }
    }
}