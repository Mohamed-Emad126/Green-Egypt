{
    "openapi": "3.0.0",
    "info": {
        "title": "GoGreen API",
        "version": "1.0.0",
        "description": "Documentation API of GoGreen Project"
    },
    "servers": [
        {
            "url": "http://localhost:5000",
            "description": "Local server"
        }
    ],
    "tags": [
        {
            "name": "Auth",
            "description": "Operations about Authentication"
        },
        {
            "name": "Care",
            "description": "Operations about Tasks"
        },
        {
            "name": "Events",
            "description": "Operations about Events"
        },
        {
            "name": "Guides",
            "description": "Operations about Guides"
        },
        {
            "name": "Nurseries",
            "description": "Operations about Nurseries"
        },
        {
            "name": "Users",
            "description": "Operations about Users"
        },
        {
            "name": "Trees",
            "description": "Operations about Trees"
        },
        {
            "name": "Partners",
            "description": "Operations about Partners"
        },
        {
            "name": "Coupons",
            "description": "Operations about Coupon"
        },
        {
            "name": "Community",
            "description": "Operations about Reports, Comments, Responses"
        },
        {
            "name": "notifications",
            "description": "Operations about Notifications"
        }
    ],
    "paths": {
        "/api/auth/register": {
            "post": {
                "tags": ["Auth"],
                "summary": "Register",
                "description": "Register a new user with username, email, and password.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "example" : "Hagar Gamal",
                                        "length" : {"max" : 15, "min": 3}
                                    },
                                    "email": {
                                        "type": "string",
                                        "example" : "Hagarelessawy0@gmail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example" : "123_456_789",
                                        "length" : {"min": 8}
                                    },
                                    "passwordConfirmation": {
                                        "type": "string",
                                        "example" : "123_456_789",
                                        "length" : {"min": 8}
                                    }
                                },
                                "required": ["username", "email", "password", "passwordConfirmation"]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "headers": {
                            "x-auth-token": {
                                "description": "Authentication token for the newly registered user",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User created successfully"
                                        },
                                        "user_id": {
                                            "type": "string",
                                            "example": "674f5632e57414133c9499f9"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the user enters an email that already exists, or the two passwords do not match, or enters something that conflicts with the validation rules.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email already exists"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "tags": ["Auth"],
                "summary": "Login",
                "description": "Login user with email and password.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example" : "Hagarelessawy0@gmail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example" : "123_456_789",
                                        "length" : {"min": 8}
                                    }
                                },
                                "required": ["email", "password"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {
                            "x-auth-token": {
                                "description": "Authentication token for the logged-in user",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Login successfully"
                                        },
                                        "user_id": {
                                            "type": "string",
                                            "example": "674f5632e57414133c9499f9"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Wrong email or password",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Wrong password"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "tags": ["Auth"],
                "summary": "Logout",
                "description": "Logs out current logged in user session by invalidating the token.",
                "security": [{
                    "bearerAuth": []
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/forgotPassword": {
            "post": {
                "tags": ["Auth"],
                "summary": "forgot password",
                "description": "Send a reset password link to the user's email.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "Hagarelessawy0@gmail.com"
                                    }
                                },
                                "required": ["email"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email sent successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "There is no user with this email"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "error sending email or invalid email format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email could not be sent - {err}"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/reset-password/{token}": {
            "post": {
                "tags": ["Auth"],
                "summary": "Reset Password",
                "description": "Reset user's password using the token sent to their email.",
                "parameters": [{
                    "name": "token",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "password": {
                                        "type": "string",
                                        "example" : "123456789",
                                        "length" : {"min": 8}
                                    },
                                    "passwordConfirmation": {
                                        "type": "string",
                                        "example" : "123456789",
                                        "length" : {"min": 8}
                                    }
                                },
                                "required": ["password", "passwordConfirmation"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password reset successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invalid token or user not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid token"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Passwords do not match or are shorter than 8 characters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "passwords do not match"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/users/{id}": {
            "get": {
                "tags": ["Users"],
                "summary": "Get specific user",
                "description": "Get specific user profile by its id",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "674f5632e57414133c9499f9"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update user",
                "description": "Allows a user to update their profile information except for points.",
                "tags": ["Users"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "User ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "674f5632e57414133c9499f9"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "description": "New username (3-15 characters)",
                                        "example": "Hagora"
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "New email address",
                                        "example": "hagargamal@example.com"
                                    },
                                    "location": {
                                        "type": "object",
                                        "description": "User's location",
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "enum": ["Point"],
                                                "example": "Point"
                                            },
                                            "coordinates": {
                                                "type": "array",
                                                "items": { "type": "number" },
                                                "minItems": 2,
                                                "maxItems": 2,
                                                "example": [30.0444, 31.2357]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User updated successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error - user enters something that conflicts with the validation rules.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Points cannot be updated"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token, session expired, or password recently changed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User is not authorized to update this profile.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete user",
                "description": "Marks the user as inactive, moves their data to the trash collection, and deletes the original record.",
                "tags": ["Users"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "User ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "674f5632e57414133c9499f9"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User deleted successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token, session expired, or password recently changed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User is not authorized to delete this account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/users/{id}/activity": {
            "put": {
                "tags": ["Users"],
                "summary": "Update user points",
                "description": "Update user points based on action taken",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "674f5632e57414133c9499f9"
                    }
                }],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "activity": {
                                        "type": "string",
                                        "enum": ["locate", "report", "care", "plant"],
                                        "example": "locate"
                                    }
                                },
                                "required": ["activity"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Points added successfully, current points: 453, keep going to earn a coupon!"
                                        },
                                        "coupon": {
                                            "oneOf": [
                                                {
                                                    "type": "null",
                                                    "description": "The user has not collected a total of 500 points yet."
                                                },
                                                {
                                                    "type": "object",
                                                    "description": "coupon",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Coupon"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the user enters anything other than locate, report, care, plant",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid activity"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "summary": "The user who requested is not the owner of the ID in the path",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}/claim-pending-coupons": {
            "post": {
                "summary": "Claim pending coupons for a user",
                "description": "Allows a user to claim their pending coupons if available.",
                "tags": ["Users"],
                "security": [{
                    "BearerAuth": []
                }],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "User ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "674f5632e57414133c9499f9"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "1 coupons claimed."
                                        },
                                        "coupon": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Coupon"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "No pending coupons to claim or no available coupons.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No pending coupons to claim."
                                        },
                                        "coupon": {
                                            "type": "null"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "summary": "The user who requested is not the owner of the ID in the path",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}/image": {
            "patch": {
                "summary": "Upload user profile picture",
                "description": "Allows the user to upload a new profile picture with extension png / jpg / jpeg.",
                "tags": ["Users"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "User ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "674f5632e57414133c9499f9"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Profile picture file"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Image uploaded successfully."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing image file or unexpected file extension)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Image is required."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "summary": "The user who requested is not the owner of the ID in the path",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete user profile picture",
                "description": "Removes the user's profile picture and resets it to the default avatar.",
                "tags": ["Users"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "User ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "674f5632e57414133c9499f9"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Picture deleted successfully."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "summary": "The user who requested is not the owner of the ID in the path",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}/change-password": {
            "put": {
                "summary": "Change user password",
                "description": "Allows a user to change their password by providing the current password and a new password.",
                "tags": ["Users"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "User ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "674f5632e57414133c9499f9"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "currentPassword": {
                                        "type": "string",
                                        "description": "User's current password",
                                        "example": "12345678"
                                    },
                                    "newPassword": {
                                        "type": "string",
                                        "description": "New password (must be at least 8 characters)",
                                        "example": "123456780"
                                    },
                                    "confirmNewPassword": {
                                        "type": "string",
                                        "description": "Confirmation of the new password",
                                        "example": "123456780"
                                    }
                                },
                                "required": ["currentPassword", "newPassword", "confirmNewPassword"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password changed successfully."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "validation error - user enters something that conflicts with the validation rules.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Current password is incorrect."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "summary": "The user who requested is not the owner of the ID in the path",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/users/{id}/tree": {
            "get": {
                "tags": ["Care"],
                "summary": "Retrieve user trees",
                "description": "Retrieval of trees planted by the user",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "required": true,
                    "schema": {
                        "type": "string",    
                        "format": "objectid",
                        "example": "674f5632e57414133c9499f9"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "array of trees which user was planted",
                                    "items": {
                                        "$ref": "#/components/schemas/Tree"
                                    }
                                },
                                "example": [
                                    {
                                        "treeLocation": {
                                            "type": "Point",
                                            "latitude": 25,
                                            "longitude": 26
                                        },
                                        "_id": "67978b5804bb6348dd0f63cf",
                                        "healthStatus": "Diseased",
                                        "problem": "testt",
                                        "image": "../uploads/not-found-image.png",
                                        "plantedRecently": true,
                                        "byUser": "674f5632e57414133c9499f9",
                                        "reportsAboutIt": [
                                            "67978bb904bb6348dd0f63d4"
                                        ],
                                        "createdAt": "2025-01-27T13:34:16.460Z",
                                        "updatedAt": "2025-02-07T00:40:55.016Z",
                                        "__v": 6,
                                        "treeName": "tree 1"
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "if user Enters something that conflicts with the validation rules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid User ID Format"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [ "Trees" ],
                "summary": "Locate tree",
                "description": "Locating a tree and adding it to the database, whether it is newly planted or already existing",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "674f5632e57414133c9499f9"
                    }
                }],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "treeName": {
                                        "type": "string",
                                        "maxLength": 15,
                                        "example": "tree 1"
                                    },
                                    "treeLocation": {
                                        "type": "object",
                                        "properties": {
                                            "type": "string",
                                            "enum": ["Point"],
                                            "coordinates": {
                                                "type": "array",
                                                "items": {
                                                    "type": "number",
					                                "format": "float"
                                                },
                                                "minItems": 2,
                                                "maxItems": 2,
                                                "description": "Length must be 2 elements [longitude, latitude] - longitude must be between 24 and 37, latitude must be between 22 and 32"
                                            }
                                        },
                                        "required": ["type", "coordinates"],
                                        "example": {
                                                "type": "Point",
                                                "coordinates": [30, 25]
                                        }
                                    },
                                    "healthStatus": {
                                        "type": "string",
                                        "example": "Healthy",
                                        "enum": ["Healthy", "Diseased", "Dying"]
                                    },
                                    "problem": {
                                        "type": "string",
                                        "description": "It's required if healthStatus is Diseased or Dying",
                                        "default": "No problem"
                                    },
                                    "image": {
                                        "type": "string",
					                    "format": "binary",
                                        "description": "It is a file with extension jpg, png or jpeg",
                                        "example": "6cd41bd6c67f6a7c89f1a5f73f86d193.jpg"
                                    }
                                },
                                "required": ["treeLocation", "healthStatus", "treeName"]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree located successfully"
                                        }
                                    }
                                    
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If user enters something that conflicts with the validation rules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Latitude must be between 22 and 32"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403":{
                        "summary": "The user who requested is not the owner of the ID in the path",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/users/{id}/task": {
            "post":{
                "tags": ["Care"],
                "summary": "Add task",
                "description": "Add task in care page",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                        "name": "id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "674f5632e57414133c9499f9"
                        }
                }],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Water the tree",
                                        "enum": ["Water the tree", "Prune dead branches", "Check for pests", "Fertilize the soil"]
                                    },
                                    "treeID": {
                                        "type": "string",
                                        "example" : "67978b5804bb6348dd0f63cf"
                                    }
                                },
                                "required": ["title", "treeID"]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task created successfully"
                                        },
                                        "task": {
                                            "type": "string",
                                            "example": "Water the tree"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the user enters something that conflicts with the validation rules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid task title"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found or tree not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403":{
                        "summary": "The user who requested is not the owner of the ID in the path or the tree",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": ["Care"],
                "summary": "Retrieve user tasks",
                "description": "Display the daily tasks for each tree, classified as completed or pending",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "example": "674f5632e57414133c9499f9"
                    }
                }],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "treeIDs": {
                                        "type": "array",
                                        "example" : ["6797bb1235f66e923435a858", "67978b5804bb6348dd0f63cf"]
                                    }
                                },
                                "required": ["treeIDs"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "treeID": {
                                                "type": "string",
                                                "description": "Unique identifier for the tree",
                                                "example": "67978b5804bb6348dd0f63cf"
                                            },
                                            "treeName": {
                                                "type": "string",
                                                "description": "Name of the tree",
                                                "example": "tree 1"
                                            },
                                            "pendingTasks": {
                                                "type": "array",
                                                "description": "List of pending tasks for the tree",
                                                "items": {
                                                    "$ref": "#/components/schemas/Task"
                                                }
                                            },
                                            "completedTasks": {
                                                "type": "array",
                                                "description": "List of completed tasks for the tree",
                                                "items": {
                                                    "$ref": "#/components/schemas/Task"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If something is entered that conflicts with the validation rules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "If enter something that conflicts with the validation rules"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "User not found or tree not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403":{
                        "summary": "The user who requested is not the owner of the ID in the path",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tasks/{id}": {
            "post": {
                "tags": ["Care"],
                "summary": "Mark task",
                "description": "Mark task as done or cancel it",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Task ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "679d586f1ea9acf426404abc"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task marked as done successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task not found"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403":{
                        "summary": "The user who requested is not the owner of the task",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Care"],
                "summary": "Delete task",
                "description": "Delete task",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "example": "679d586f1ea9acf426404abc"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {    
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task deleted successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task not found"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403":{
                        "summary": "The user who requested is not the owner of the task",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tasks/{id}/delete-all-tasks": {
            "delete": {
                "tags": ["Care"],
                "summary": "Delete all tasks of a tree",
                "description": "Delete all tasks of a tree",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Tree ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "679d586f1ea9acf426404abc"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {    
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tasks deleted successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "Tree not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree not found"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403":{
                        "summary": "The user who requested is not the owner of the tree",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You are not authorized to perform this action"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/search/home/{key}": {
            "get": {
                "tags": ["Guides", "Events", "Nurseries"],
                "summary": "Search home",
                "description": "Search for articles, events or Nurseries in the home",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "key",
                    "in": "path",
                    "description": "Anything you want to search for",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "example": "test"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Articles": {
                                            "oneOf": [
                                                {
                                                    "type": "string",
                                                    "description": "Message indicating no articles found",
                                                    "example": "No article found"
                                                },
                                                {
                                                    "type": "array",
                                                    "description": "Array of article objects",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Article"
                                                    }
                                                }
                                            ]
                                        },
                                        "Events": {
                                            "oneOf": [
                                                {
                                                    "type": "array",
                                                    "description": "Array of event objects",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Event"
                                                    }
                                                },
                                                {
                                                    "type": "string",
                                                    "description": "Message indicating no events found",
                                                    "example": "No events found"
                                                }
                                            ]
                                        },
                                        "Nurseries": {
                                            "oneOf": [
                                                {
                                                    "type": "string",
                                                    "description": "Message indicating no nurseries found",
                                                    "example": "No nurseries found"
                                                },
                                                {
                                                    "type": "array",
                                                    "description": "Array of nursery objects",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Nursery"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No results found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No results found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/search/community/{key}": {
            "get": {
                "tags": ["Community"],
                "summary": "Search community",
                "description": "Search for users or reports in the community",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "key",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "example": "hagar"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Users": {
                                            "oneOf": [
                                                {
                                                    "type": "array",
                                                    "description": "Array of user objects",
                                                    "items": {
                                                        "$ref": "#/components/schemas/User"
                                                    }
                                                },
                                                {
                                                    "type": "string",
                                                    "description": "Message indicating no users found",
                                                    "example": "No users found"
                                                }
                                            ]
                                        },
                                        "Reports": {
                                            "oneOf": [
                                                {
                                                    "type": "string",
                                                    "description": "Message indicating no reports found",
                                                    "example": "No reports found"
                                                },
                                                {
                                                    "type": "array",
                                                    "description": "Array of report objects",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Report"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "No results found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No results found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/nursery/": {
            "get": {
                "tags": ["Nurseries"],
                "summary": "Get all nurseries (pagination)",
                "description": "Display all nurseries registered in the application in the form of pages. Each page displays a specific number of elements that you will specify as a parameter",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description" : "The number of the page",
                        "require" : "false",
                        "schema":{
                            "type": "number",
                            "format": "integer",
                            "default": 1,
                            "validation": "From 1 to (total number of elements / number of elements on one page)"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description" : "The number of elements on one page",
                        "require" : "false",
                        "schema":{
                            "type": "number",
                            "default": 5
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "length": {
                                            "type": "integer",
                                            "description": "Number of nurseries in the current page",
                                            "example": 6
                                        },
                                        "page": {
                                            "type": "integer",
                                            "description": "Current page number",
                                            "example": 1
                                        },
                                        "nurseries": {
                                            "type": "array",
                                            "description": "List of nurseries",
                                            "items": {
                                                "$ref": "#/components/schemas/Nursery"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/nursery/{id}": {
            "get":{
                "tags": ["Nurseries"],
                "summary": "Get specific nursery",
                "description": "Get specific nursery page by its id",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Nursery ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "67a53b762d3889664beff056"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Nursery"
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "Nursery not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Nursery not found"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/guide/": {
            "get": {
                "tags": ["Guides"],
                "summary": "Get all guides (pagination)",
                "description": "Display all guides registered in the application in the form of pages. Each page displays a specific number of elements that you will specify as a parameter",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description" : "The number of the page",
                        "require" : "false",
                        "schema":{
                            "type": "number",
                            "format": "integer",
                            "default": 1,
                            "validation": "From 1 to (total number of elements / number of elements on one page)"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description" : "The number of elements on one page",
                        "require" : "false",
                        "schema":{
                            "type": "number",
                            "default": 6
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "length": {
                                            "type": "integer",
                                            "description": "Number of nurseries in the current page",
                                            "example": 6
                                        },
                                        "page": {
                                            "type": "integer",
                                            "description": "Current page number",
                                            "example": 1
                                        },
                                        "articles": {
                                            "type": "array",
                                            "description": "List of articles",
                                            "items": {
                                                "$ref": "#/components/schemas/Article"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/guide/{id}": {
            "get":{
                "tags": ["Guides"],
                "summary": "Get specific article",
                "description": "Get specific article page by its id",
                "security": [{
                    "bearerAuth": []
                }],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Guide ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "67a51fcea73325d93fadf5dc"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Guide"
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "Guide not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Guide not found"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/event/": {
            "get": {
                "tags": ["Events"],
                "summary": "Get all events (pagination)",
                "description": "Display all events registered in the application in the form of pages. Each page displays a specific number of elements that you will specify as a parameter",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description" : "The number of the page",
                        "require" : "false",
                        "schema":{
                            "type": "number",
                            "format": "integer",
                            "default": 1,
                            "validation": "From 1 to (total number of elements / number of elements on one page)"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description" : "The number of elements on one page",
                        "require" : "false",
                        "schema":{
                            "type": "number",
                            "default": 6
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "length": {
                                            "type": "integer",
                                            "description": "Number of events in the current page",
                                            "example": 6
                                        },
                                        "page": {
                                            "type": "integer",
                                            "description": "Current page number",
                                            "example": 1
                                        },
                                        "events": {
                                            "type": "array",
                                            "description": "List of events",
                                            "items": {
                                                "$ref": "#/components/schemas/Event"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }   
        },
        "api/event/{id}": {
            "get":{
                "tags": ["Events"],
                "summary": "Get specific event",
                "description": "Get specific event page by its id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Event ID",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "672fc5bbfdc6d15f778e25d7"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    },
                    "404": {
                        "summary": "Event not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Event not found"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token , Session expired or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/trees": {
            "get": {
                "summary": "Get all trees",
                "description": "Retrieves trees with optional filters",
                "tags": ["Trees"],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "required": false,
                        "description": "Filters for trees",
                        "schema": {
                            "type": "string",
                            "example": "{\"healthStatus\":\"Healthy\"}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "length": {
                                            "type": "integer",
                                            "description": "Number of trees",
                                            "example": 5
                                        },
                                        "trees": {
                                            "type": "array",
                                            "description": "List of trees",
                                            "items": {
                                                "$ref": "#/components/schemas/Tree"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/trees/{id}": {
            "get": {
                "summary": "Get tree by ID",
                "description": "Retrieves a specific tree by its ID",
                "tags": ["Trees"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Tree ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67978b5804bb6348dd0f63cf"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tree"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token, session expired, or unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tree not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update tree information",
                "description": "Update specific tree properties such as name, health status, or location.",
                "tags": ["Trees"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Tree ID",
                    "schema": {
                        "type": "string",
                        "format": "objectid",
                        "example": "67978b5804bb6348dd0f63cf"
                    }
                }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "treeName": {
                                        "type": "string",
                                        "example": "tree 1"
                                    },
                                    "healthStatus": {
                                        "type": "string",
                                        "enum": ["Healthy", "Diseased", "Dying"],
                                        "example": "Dying"
                                    },
                                    "problem": {
                                        "type": "string",
                                        "example": "Tree is lacking water"
                                    },
                                    "treeLocation": {
                                        "type": "object",
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "enum": ["Point"],
                                                "example": "Point"
                                            },
                                            "coordinates": {
                                                "type": "array",
                                                "items": {
                                                "type": "number"
                                                },
                                                "example": [31.2001, 29.9187]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree updated successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error - user enters something that conflicts with the validation rules.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid tree location format"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token, session expired, or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tree not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a tree",
                "description": "Remove a tree from the database and store its details in the trash collection.",
                "tags": ["Trees"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "ID of the tree to delete",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67978b5804bb6348dd0f63cf"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "deletionReason": {
                                        "type": "string",
                                        "enum": ["Died", "Cut", "False Record"],
                                        "example": "Died"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree deleted successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error - missing or invalid deletion reason",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Deletion reason is required and must be either 'Died', 'Cut', or 'False Record'"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token, session expired, or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please login"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tree not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/trees/{id}/image": {
            "patch": {
                "summary": "Upload tree image",
                "description": "Allows uploading an image (png / jpg / jpeg) for a specific tree to update it",
                "tags": ["Trees"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Tree ID",
                        "schema": {
                            "type": "string",
                            "format": "objectid",
                            "example": "67978b5804bb6348dd0f63cf"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Picture updated successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing image file or unexpected file extension)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Image is required."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token, session expired, or password recently changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized access - please log in"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tree not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tree not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "JWT token for authentication. Example: 'Bearer {token}'"
            }
        },
        "schemas": {
            "Article": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "example": "67a51fcea73325d93fadf5dc"
                    },
                    "articletitle": {
                        "type": "string",
                        "example": "الزراعة في المنزل"
                    },
                    "content": {
                        "type": "string",
                        "example": "تُعدّ الزراعة في المنزل إحدى الممارسات التي تعود على الفرد بالعديد من الفوائد..."
                    },
                    "articlePic": {
                        "type": "string",
                        "example": "../uploads/not-found-image.png"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-02-06T20:47:10.498Z"
                    },
                    "__v": {
                        "type": "integer",
                        "example": 0
                    }
                }
            },
            "Nursery": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Unique identifier for the nursery",
                        "example": "67a53b762d3889664beff056"
                    },
                    "nurseryName": {
                        "type": "string",
                        "description": "Name of the nursery",
                        "example": "يورودريب ايجيبت"
                    },
                    "address": {
                        "type": "string",
                        "description": "Address of the nursery",
                        "example": "164 شارع الهرم – الجيزة – مصر."
                    },
                    "location": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": ["Point"],
                                "example": "Point"
                            },
                            "coordinates": {
                                "type": "array",
                                "minItems": 2,
                                "maxItems": 2,
                                "example": [31.20886, 30.07694],
                                "description": "Coordinates format: [longitude, latitude]. Longitude must be between 24 and 37, Latitude must be between 22 and 32.",
                                "items": [
                                    {
                                        "type": "number",
                                        "minimum": 24,
                                        "maximum": 37
                                    },
                                    {
                                        "type": "number",
                                        "minimum": 22,
                                        "maximum": 32
                                    }
                                ]
                            }
                        }
                    },
                    "rate": {
                        "type": "number",
                        "format": "float",
                        "description": "Rate of the nursery on Google Maps",
                        "example": 4.5,
                        "minimum": 0,
                        "maximum": 5
                    },
                    "__v": {
                        "type": "integer",
                        "description": "Version key used by MongoDB",
                        "example": 0
                    }
                }
            },
            "Event": {
                "type": "object",
                "properties": {
                    "location": {
                        "type": "object",
                        "properties": {
                            "latitude": {
                                "type": "number",
                                "example": 30
                            },
                            "longitude": {
                                "type": "number",
                                "example": 24
                            }
                        }
                    },
                    "eventImage": {
                        "type": "string",
                        "example": "../uploads/not-found-image.png"
                    } ,
                    "_id": {
                        "type": "string",
                        "example": "672fc5bbfdc6d15f778e25d7"
                    },
                    "eventName": {
                        "type": "string",
                        "example": "spring"
                    },
                    "eventDate": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-12-31T22:00:00.000Z"
                    },
                    "description": {
                        "type": "string",
                        "example": "description"
                    },
                    "eventStatus": {
                        "type": "string",
                        "example": "completed"
                    },
                    "organizedWithPartnerID": {
                        "type": "string",
                        "example": "6712c34869c17428b80a63c6"
                    },
                    "__v": {
                        "type": "integer",
                        "example": 3
                    },
                    "interestedIn": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": ["674f5632e57414133c9499f9"]
                    }
                }
            },
            "User": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "example": "674f5632e57414133c9499f9"
                    },
                    "username": {
                        "type": "string",
                        "example": "Hagar"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "hagarelessawy0@gmail.com"
                    },
                    "profilePic": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://res.cloudinary.com/dvlao566z/image/upload/v1733439630/kjhjxq357ujwlaefpg53.jpg"
                    },
                    "points": {
                        "type": "number",
                        "example": 20
                    },
                    "pendingCoupons": {
                        "type": "number",
                        "example": 0
                    },
                    "role": {
                        "type": "string",
                        "enum": ["admin", "user"],
                        "example": "admin"
                    },
                    "location": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": ["Point"],
                                "example": "Point"
                            },
                            "coordinates": {
                                "type": "array",
                                "minItems": 2,
                                "maxItems": 2,
                                "example": [31.2357, 30.0444],
                                "description": "Coordinates format: [longitude, latitude]. Longitude must be between 24 and 37, Latitude must be between 22 and 32.",
                                "items": [
                                    {
                                        "type": "number",
                                        "minimum": 24,
                                        "maximum": 37
                                    },
                                    {
                                        "type": "number",
                                        "minimum": 22,
                                        "maximum": 32
                                    }
                                ]
                            }
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-12-03T19:04:18.280Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-01-29T11:28:48.753Z"
                    },
                    "__v": {
                        "type": "number",
                        "example": 0
                    }
                }
            },
            "Coupon": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Unique identifier for the coupon",
                        "example": "6713fe22c60134182f35725c"
                    },
                    "code": {
                        "type": "string",
                        "description": "Unique 6-character coupon code",
                        "example": "ABC123",
                        "minLength": 6,
                        "maxLength": 6
                    },
                    "value": {
                        "type": "number",
                        "description": "Discount or value of the coupon",
                        "example": 50
                    },
                    "brand": {
                        "type": "string",
                        "description": "ID of the brand (Partner) associated with the coupon",
                        "example": "6712c34869c17428b80a63c6"
                    },
                    "expiryDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Expiration date of the coupon",
                        "example": "2025-12-31T23:59:59.999Z"
                    },
                    "redeemed": {
                        "type": "boolean",
                        "description": "Indicates whether the coupon has been redeemed",
                        "example": false
                    },
                    "addByAdmin": {
                        "type": "string",
                        "description": "ID of the admin who added the coupon",
                        "example": "674f5632e57414133c9499f9"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the coupon was created",
                        "example": "2024-03-05T14:30:00.000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the coupon was last updated",
                        "example": "2024-03-06T10:15:00.000Z"
                    }
                }
            },
            "Report": {
                "type": "object",
                    "properties": {
                        "location": {
                            "type": "object",
                            "properties": {
                                "type": "string",
                                "enum": ["Point"],
                                "coordinates": {
                                    "type": "array",
                                    "items": {
                                        "type": "number"
                                    },
                                    "minItems": 2,
                                    "maxItems": 2,
                                    "description": "Length must be 2 elements [longitude, latitude] - longitude must be between 24 and 37, latitude must be between 22 and 32"
                                }
                            }
                        },
                        "_id": {
                            "type": "string",
                            "example": "67978c5004bb6348dd0f63da"
                        },
                        "reportType": {
                            "type": "string",
                            "enum": ["A tree needs care", "A place needs tree", "Other"],
                            "example": "A tree needs care"
                        },
                        "description": {
                            "type": "string",
                            "example": "test2"
                        },
                        "images": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "example": "https://res.cloudinary.com/dvlao566z/image/upload/v1737987149/py1qurh4dfrpmk3ffdmt.png"
                            }
                        },
                        "createdBy": {
                            "type": "string",
                            "description": "user ID",
                            "example": "674f5632e57414133c9499f9"
                        },
                        "treeID": {
                            "type": "string",
                            "example": "6797bb1235f66e923435a858"
                        },
                        "upVotes": {
                            "type": "number",
                            "example": 1
                        },
                        "upVoters": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "users ID",
                                "example": "674f5632e57414133c9499f9"
                            }
                        },
                        "status": {
                            "type": "string",
                            "enum": ["Pending", "In Progress", "Resolved", "Awaiting Verification"],
                            "example": "Pending"
                        },
                        "responses": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "example": "6798c650f0ddb44f0d7ef905"
                            }
                        },
                        "comments": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "example": "6797904c10d099e3275e0ba6"
                            }
                        },
                        "modificationHistory": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "oldData": {
                                        "type": "object",
                                        "properties": {
                                            "reportType": {
                                                "type": "string",
                                                "example": "A tree needs care"
                                            },
                                            "description": {
                                                "type": "string",
                                                "example": "testttt2"
                                            },
                                            "location": {
                                                "type": "object",
                                                "properties": {
                                                    "latitude": {
                                                        "type": "number",
                                                        "example": 27
                                                    },
                                                    "longitude": {
                                                        "type": "number",
                                                        "example": 24
                                                    }
                                                }
                                            },
                                            "images": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "https://res.cloudinary.com/dvlao566z/image/upload/v1737987149/py1qurh4dfrpmk3ffdmt.png"
                                                }
                                            },
                                            "treeID": {
                                                "type": "string",
                                                "example": "67978b5804bb6348dd0f63cf"
                                            },
                                            "createdAt": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2025-01-27T14:12:30.737Z"
                                            }
                                        }
                                    },
                                    "updatedAt": {
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2025-01-27T17:08:06.033Z"
                                    },
                                    "_id": {
                                        "type": "string",
                                        "example": "6797bd763ae87c7a8fcbf44f"
                                    }
                                }
                            }
                        },
                        "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-01-27T13:38:24.412Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-01-28T11:58:08.371Z"
                        },
                        "__v": {
                            "type": "number",
                            "example": 8
                        }
                    }
            },
            "Tree": {
                "type": "object",
                "properties": {
                    "treeName": {
                        "type": "string",
                        "maxLength": 15,
                        "example": "Acacia"
                    },
                    "treeLocation": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": ["Point"],
                                "example": "Point"
                            },
                            "coordinates": {
                                "type": "array",
                                "items": [
                                    {
                                        "type": "number",
                                        "minimum": 24,
                                        "maximum": 37,
                                        "example": 30.0444
                                    },
                                    {
                                        "type": "number",
                                        "minimum": 22,
                                        "maximum": 32,
                                        "example": 31.2357
                                    }
                                ],
                                "minItems": 2,
                                "maxItems": 2,
                                "description": "Coordinates must contain [longitude, latitude] where longitude is between 24 and 37, and latitude is between 22 and 32."
                            }
                        }
                    },
                    "_id": {
                        "type": "string",
                        "example": "67978b5804bb6348dd0f63cf"
                    },
                    "healthStatus": {
                        "type": "string",
                        "enum": ["Healthy", "Diseased"],
                        "example": "Diseased"
                    },
                    "problem": {
                        "type": "string",
                        "example": "testt"
                    },
                    "image": {
                        "type": "string",
                        "example": "../uploads/not-found-image.png"
                    },
                    "plantedRecently": {
                        "type": "boolean",
                        "example": true
                    },
                    "byUser": {
                        "type": "string",
                        "example": "674f5632e57414133c9499f9"
                    },
                    "reportsAboutIt": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": ["67978bb904bb6348dd0f63d4"]
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-01-27T13:34:16.460Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-01-27T17:15:22.357Z"
                    },
                    "__v": {
                        "type": "integer",
                        "example": 6
                    }
                }
            },
            "Task": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Unique identifier for the task",
                        "example": "67a55b87a5cec1ecb8cdfd2c"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the task",
                        "example": "Prune dead branches"
                    },
                    "tree": {
                        "type": "object",
                        "description": "Tree associated with the task",
                        "properties": {
                            "_id": {
                                "type": "string",
                                "example": "67978b5804bb6348dd0f63cf"
                            },
                            "treeName": {
                                "type": "string",
                                "example": "tree 1"
                            }
                        }
                    },
                    "user": {
                        "type": "string",
                        "description": "User ID associated with the task",
                        "example": "674f5632e57414133c9499f9"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date and time when the task is due",
                        "example": "2025-02-07T01:01:59.429Z"
                    },
                    "isDone": {
                        "type": "boolean",
                        "description": "Indicates whether the task is completed",
                        "example": false
                    },
                    "__v": {
                        "type": "integer",
                        "description": "Version key used by MongoDB",
                        "example": 0
                    }
                }
            }
        }
    }
}
